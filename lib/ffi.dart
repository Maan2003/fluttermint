// This file initializes the dynamic library and connects it with the stub
// generated by flutter_rust_bridge_codegen.

import 'dart:ffi';

import 'package:path_provider/path_provider.dart';

import 'client.dart';
import 'bridge_generated.dart';
import 'dart:io' as io;

const _base = 'minimint-bridge';

// On MacOS, the dynamic library is not bundled with the binary,
// but rather directly **linked** against the binary.
final _dylib = io.Platform.isWindows ? '$_base.dll' : 'lib$_base.so';

class MinimintClientImpl implements MinimintClient {
  // The late modifier delays initializing the value until it is actually needed,
  // leaving precious little time for the program to quickly start up.
  late final MinimintBridge api = MinimintBridgeImpl(
      io.Platform.isIOS || io.Platform.isMacOS
          ? DynamicLibrary.executable()
          : DynamicLibrary.open(_dylib));

  /// If this returns Some, user has joined a federation. Otherwise they haven't.
  Future<bool> init() {
    return api.init();
  }

  Future<void> joinFederation({required String configUrl}) async {
    await api.joinFederation(
        userDir: (await getApplicationDocumentsDirectory()).path,
        configUrl: configUrl);
  }

  Future<void> leaveFederation() {
    return api.leaveFederation();
  }

  Future<int> balance() {
    return api.balance();
  }

  Future<String> pay({required String bolt11}) {
    return api.pay(bolt11: bolt11);
  }

  Future<String> decodeInvoice({required String bolt11}) {
    return api.decodeInvoice(bolt11: bolt11);
  }

  Future<String> invoice({required int amount}) {
    return api.invoice(amount: amount);
  }
}
